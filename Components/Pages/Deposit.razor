@page "/Deposit"
@using System.Globalization
@using Microsoft.AspNetCore.Components.Authorization
@using ProjektKrypto2.Data
@using ProjektKrypto2.Components.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject BalanceService BalanceService

@rendermode InteractiveServer

<PageTitle>Doładuj konto</PageTitle>

<h3>Doładuj swoje saldo</h3>

@if (!isUserAuthenticated)
{
    <p><strong>Zaloguj się, aby doładować saldo.</strong></p>
}
else
{
    <p>Twoje saldo: <strong>@Balance.ToString("C", CultureInfo.GetCultureInfo("en-US"))</strong></p>

    <div class="mb-3">
        <label>Kwota doładowania (USD):</label>
        <input type="number" class="form-control" @bind="amountToAdd" min="1" step="0.01" />
    </div>

    <button class="btn btn-primary" @onclick="DepositFunds">Doładuj</button>

    @if (!string.IsNullOrEmpty(transactionMessage))
    {
        <p class="mt-3">@transactionMessage</p>
    }
}

@code {
    private decimal Balance { get; set; } = 0;
    private decimal amountToAdd = 0;
    private string transactionMessage = "";
    private bool isUserAuthenticated = false;
    private string? userId = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                isUserAuthenticated = true;
                await LoadBalance();
            }
        }
    }

    private async Task LoadBalance()
    {
        if (string.IsNullOrEmpty(userId)) return;
        await BalanceService.LoadBalanceAsync(userId);
        Balance = BalanceService.GetBalance();
        StateHasChanged();
    }

    private async Task DepositFunds()
    {
        if (userId == null || amountToAdd <= 0)
        {
            transactionMessage = "Podaj poprawną kwotę doładowania!";
            return;
        }

        var dbUser = await DbContext.UserBalances.FindAsync(userId);
        if (dbUser == null)
        {
            dbUser = new UserBalance { UserId = userId, Balance = 0 };
            await DbContext.UserBalances.AddAsync(dbUser);
        }

        dbUser.Balance += amountToAdd;
        await DbContext.SaveChangesAsync();

        await BalanceService.UpdateBalanceAsync(userId, dbUser.Balance); // Aktualizacja globalna

        Balance = dbUser.Balance;
        transactionMessage = $"Doładowano saldo o {amountToAdd.ToString("C", CultureInfo.GetCultureInfo("en-US"))}!";
        StateHasChanged();
    }
}