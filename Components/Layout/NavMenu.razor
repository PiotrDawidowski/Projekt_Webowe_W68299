@implements IDisposable
@using ProjektKrypto2.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject BalanceService BalanceService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid d-flex align-items-center">
        <a class="navbar-brand" href="">Portfel Krypto</a>
        @if (IsUserLoggedIn)
        {
            <span class="text-white ms-auto">
                Saldo: <strong>@Balance.ToString("C", CultureInfo.GetCultureInfo("en-US"))</strong>
            </span>
        }
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <a href="Auth" class="nav-link large-button">
                        <span class="bi bi-currency-bitcoin"></span> Kryptowaluty
                    </a>
                </div>

                <div class="nav-item px-3">
                    <a href="Wallet" class="nav-link large-button">
                        <span class="bi bi-wallet2"></span> Portfel
                    </a>
                </div>

                <div class="nav-item px-3">
                    <a href="Deposit" class="nav-link large-button">
                        <span class="bi bi-cash-coin"></span> Doładuj saldo
                    </a>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill"></span> @username
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-box-arrow-left"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>

            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge"></span> Login
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-plus"></span> Register
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

<style>
    .large-button {
        display: block;
        padding: 15px;
        font-size: 1.2rem;
        text-align: center;
        background: linear-gradient(45deg, #1d3b70, #233d7b);
        border-radius: 10px;
        color: white;
        font-weight: bold;
        transition: background 0.3s;
    }

        .large-button:hover {
            background: linear-gradient(45deg, #1b3564, #1e366a);
            color: white;
        }
</style>

@code {
    private string? currentUrl;
    private string username = "Guest";
    private bool IsUserLoggedIn = false;
    private decimal Balance = 0;
    private string? userId = null;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            IsUserLoggedIn = true;
            userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(userId))
            {
                await LoadBalance();
            }
        }
    }

    private async Task LoadBalance()
    {
        if (string.IsNullOrEmpty(userId)) return;
        await BalanceService.LoadBalanceAsync(userId);
        Balance = BalanceService.GetBalance();
        StateHasChanged();
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        Console.WriteLine("[DEBUG] NavMenu: Zmiana strony, odświeżam saldo...");
        await LoadBalance();
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private string GetUsername(string? email)
    {
        if (string.IsNullOrEmpty(email)) return "Guest";
        return email.Split('@')[0];
    }
}